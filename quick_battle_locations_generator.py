__author__ = "Swagger"

import PIL
from PIL import Image
import os
import glob
import math

#get the current working directory
directory = os.getcwd()

def load_descr_ground_types_txt_FromFolder(directory):
# Helper Functions
    def createTXTFile():
        if os.path.exists("descr_quick_battle_locations.txt"):
            os.remove("descr_quick_battle_locations.txt") 
        # Create file & write Feral's Header
        with open("descr_quick_battle_locations.txt", "w") as quick_battle_locations:
            quick_battle_locations.write(\
             ";FILE GENERATED BY SWAGGER\n\
; List of locations that's picked from at random when loading a custom battle.\n\
Coordinates represent tiles on the base game's campaign map.\n\n")
        quick_battle_locations.close()

    def writeCoordinatesToFile(coord_x, coord_y):
        # Write locations coordinates to file
        with open("descr_quick_battle_locations.txt", "a") as quick_battle_locations:
            quick_battle_locations.write("location {}  {}\n".format(coord_x, coord_y))
        quick_battle_locations.close()

    def paintOverlayPixels(locations_img_overlay, coord_x, coord_y):
        locations_img_overlay.putpixel((coord_x, coord_y), (255, 255, 255, 255))

    def extractValidLocs(image, image_width, image_height, locations_img_overlay):
        counter = 0
        # Define RGBs from map_ground_types that we don't want to use:
        #   sea RGBs are mandatory
        #   high mountains RGB will probably be buggy
        unwanted_rgbs = [(64, 0, 0),
                         (128, 0, 0),
                         (196, 0, 0),
                         (196, 128, 128)]#,(255, 255, 255)]#(0, 0, 0)
        try:
            createTXTFile()
            # Get Coordinates and offset map_ground_types to start at 1
            for x, width in enumerate(list(reversed(range(1, image_width)))):
                for y, height in enumerate(list(reversed(range(1, image_height)))):
                    coord_x = math.floor((x-1)/2)
                    coord_y = math.floor((y-1)/2)
                    # Only want the odd ones
                    if (x % 2) != 0 or (y % 2) != 0:
                        # Probably don't want much of the Sahara, cut out coords in PS
                        if x > 1021 or y > 430:
                            # Make sure coords pixels aren't unwanted ground_types RGBs
                            if image.getpixel((x,y)) not in unwanted_rgbs:
                                # Add every 5 valid locations // PREVENTS CRASH FROM LOCATION LIMIT
                                if (coord_x % 5) == 0 and (coord_y % 5) == 0:
                                    # Convert to be compatible with map_regions
                                    counter += 1
                                    print(coord_x, coord_y)
                                    # Write to file the coordinates
                                    paintOverlayPixels(locations_img_overlay, coord_x, coord_y)
                                    writeCoordinatesToFile(coord_x, coord_y)
            print("\nTOTAL AMOUNT OF ENTRIES WRITTEN: ", counter)
        except:
            print("Couldn't create file or write to it.")

    def QuickBattleLocs(image):
        try:
            # Get image width
            image_width = image.size[0]
            # Get image height
            image_height = image.size[1]
            locations_img_overlay = Image.new('RGB', (math.floor(image_width/2),\
                                                      math.floor(image_height/2)))
            extractValidLocs(image, image_width, image_height, locations_img_overlay)
            locations_img_overlay = locations_img_overlay.transpose(PIL.Image.Transpose.FLIP_TOP_BOTTOM)
            locations_img_overlay.save('quick_battle_locations.png')
            print("descr_quick_battle_locations.txt was generated successfuly.")
        except:
            print("An error occurred.") 

# / Helper Functions

    #load map_ground_types.tga
    for filename in glob.glob('*.tga'):
        if filename[0:16] == "map_ground_types":
            image = Image.open(filename)
            image = image.transpose(PIL.Image.Transpose.FLIP_TOP_BOTTOM)
            QuickBattleLocs(image)
                
if __name__ == "__main__":
    load_descr_ground_types_txt_FromFolder(directory)